/*
 * Copyright (C) 2024 Stephen McGarry
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package com.steeviebops.hacktvgui;

import javax.swing.JOptionPane;

public class SatSettingsDialogue extends javax.swing.JDialog {
    
    private boolean changed;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        harmonicBG = new javax.swing.ButtonGroup();
        satSettingsPanel = new javax.swing.JPanel();
        lblLO = new javax.swing.JLabel();
        lblHelpText = new javax.swing.JLabel();
        txtLO = new javax.swing.JTextField();
        harmonicPanel = new javax.swing.JPanel();
        radFirst = new javax.swing.JRadioButton();
        radSecond = new javax.swing.JRadioButton();
        radThird = new javax.swing.JRadioButton();
        radFourth = new javax.swing.JRadioButton();
        chkApplyToCustom = new javax.swing.JCheckBox();
        lblRxDevice = new javax.swing.JLabel();
        cmbRxDevice = new javax.swing.JComboBox<>();
        chkShowRealFreq = new javax.swing.JCheckBox();
        buttonPanel = new javax.swing.JPanel();
        btnOK = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Satellite receiver settings");
        setName("SatSettings"); // NOI18N
        setResizable(false);

        satSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("LNB settings"));

        lblLO.setText("LNB local oscillator (GHz)");

        lblHelpText.setText("<html>Enter the LNB settings from your satellite receiver.<br>Some band plans may override this setting.<br>See the wiki page for more information.</html>");

        txtLO.setColumns(6);
        txtLO.addMouseListener(new ContextMenuListener());

        harmonicPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Harmonic settings"));

        harmonicBG.add(radFirst);
        radFirst.setText("Standard IF (first harmonic)");
        radFirst.setToolTipText("");
        radFirst.setActionCommand("1"); // NOI18N

        harmonicBG.add(radSecond);
        radSecond.setText("Second");
        radSecond.setActionCommand("2"); // NOI18N

        harmonicBG.add(radThird);
        radThird.setText("Third");
        radThird.setActionCommand("3"); // NOI18N

        harmonicBG.add(radFourth);
        radFourth.setText("Fourth");
        radFourth.setActionCommand("4"); // NOI18N

        javax.swing.GroupLayout harmonicPanelLayout = new javax.swing.GroupLayout(harmonicPanel);
        harmonicPanel.setLayout(harmonicPanelLayout);
        harmonicPanelLayout.setHorizontalGroup(
            harmonicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(harmonicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(harmonicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radFirst)
                    .addComponent(radSecond)
                    .addComponent(radThird)
                    .addComponent(radFourth))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        harmonicPanelLayout.setVerticalGroup(
            harmonicPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(harmonicPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radFirst)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radSecond)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radThird)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radFourth)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        chkApplyToCustom.setText("Apply these settings to custom frequencies");
        chkApplyToCustom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkApplyToCustomActionPerformed(evt);
            }
        });

        lblRxDevice.setText("Reception device");

        cmbRxDevice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Direct (IF)", "Ku-band LNB", "Ku LNB with BSB box", "Saorsat Ka LNB" }));
        cmbRxDevice.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                cmbRxDeviceMouseWheelMoved(evt);
            }
        });
        cmbRxDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbRxDeviceActionPerformed(evt);
            }
        });

        chkShowRealFreq.setText("Show real output frequency");
        chkShowRealFreq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowRealFreqActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout satSettingsPanelLayout = new javax.swing.GroupLayout(satSettingsPanel);
        satSettingsPanel.setLayout(satSettingsPanelLayout);
        satSettingsPanelLayout.setHorizontalGroup(
            satSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(satSettingsPanelLayout.createSequentialGroup()
                .addGroup(satSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(harmonicPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(satSettingsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(satSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHelpText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(satSettingsPanelLayout.createSequentialGroup()
                                .addComponent(lblLO)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtLO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(satSettingsPanelLayout.createSequentialGroup()
                                .addComponent(lblRxDevice)
                                .addGap(18, 18, 18)
                                .addComponent(cmbRxDevice, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(chkShowRealFreq)
                            .addComponent(chkApplyToCustom))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        satSettingsPanelLayout.setVerticalGroup(
            satSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(satSettingsPanelLayout.createSequentialGroup()
                .addComponent(lblHelpText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(satSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLO)
                    .addComponent(txtLO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkApplyToCustom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkShowRealFreq)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(satSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRxDevice)
                    .addComponent(cmbRxDevice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(harmonicPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });
        buttonPanel.add(btnOK);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        buttonPanel.add(btnCancel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(satSettingsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(satSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public SatSettingsDialogue(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        super.setLocationRelativeTo(parent);
        // Load preferences or use defaults if none defined
        Double lo = GUI.PREFS.getDouble("localoscillator", GUI.DEFAULT_LO);
        txtLO.setText(lo.toString());
        // Get RX device setting
        int rx = GUI.PREFS.getInt("rxdevice", 0);
        if ( (rx >= 0) && (rx < cmbRxDevice.getItemCount()) ) {
            cmbRxDevice.setSelectedIndex(rx);
        }
        // Get checkbox preferences
        if (GUI.PREFS.getInt("showrealfrequency", 0) == 1) {
            chkShowRealFreq.doClick();
        }
        else if (GUI.PREFS.getInt("applyloforcustomfreq", 0) == 1) {
            chkApplyToCustom.setSelected(true);
        }
        // Get harmonic setting
        switch (GUI.PREFS.getInt("harmonic", 1)) {
            case 1:
            default:
                if (radFirst.isEnabled()) radFirst.setSelected(true);
                break;
            case 2:
                if (radSecond.isEnabled()) radSecond.setSelected(true);
                break;
            case 3:
                if (radThird.isEnabled()) radThird.setSelected(true);
                break;
            case 4:
                if (radFourth.isEnabled()) radFourth.setSelected(true);
                break;
        }
        // Set focus on Cancel button
        btnCancel.requestFocus();
    }
    
    public boolean settingsChanged() {
        return changed;
    }
    
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        // Commit local oscillator to preferences
        String invalidLO = "Please enter a numeric or decimal value between 5 and 30 GHz.";
        try {
            double d = Double.parseDouble(txtLO.getText());
            if ( (d < 5.0) || (d > 30.0) ) {
                JOptionPane.showMessageDialog(null, invalidLO, GUI.APP_NAME, JOptionPane.WARNING_MESSAGE);
                return;
            }
            else if (Math.abs(d - GUI.DEFAULT_LO) < 0.000001) {
                GUI.PREFS.remove("localoscillator");
            }
            else {
                GUI.PREFS.putDouble("localoscillator", d);
            }
        }
        catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(null, invalidLO, GUI.APP_NAME, JOptionPane.WARNING_MESSAGE);
            return;
        }
        // Commit harmonic to preferences
        switch (harmonicBG.getSelection().getActionCommand()) {
            case "1":
                GUI.PREFS.remove("harmonic");
                break;
            default:
                GUI.PREFS.put("harmonic", harmonicBG.getSelection().getActionCommand());
                break;
        }
        // Commit checkboxes to preferences
        if (chkApplyToCustom.isSelected()) {
            GUI.PREFS.putInt("applyloforcustomfreq", 1);
        }
        else {
            GUI.PREFS.remove("applyloforcustomfreq");
        }
        if (chkShowRealFreq.isSelected()) {
            GUI.PREFS.putInt("showrealfrequency", 1);
        }
        else {
            GUI.PREFS.remove("showrealfrequency");
        }
        // Commit RX device to preferences
        switch (cmbRxDevice.getSelectedIndex()) {
            case 0:
                GUI.PREFS.remove("rxdevice");
                break;
            default:
                GUI.PREFS.putInt("rxdevice", cmbRxDevice.getSelectedIndex());
                break;
        }
        // Let the parent window know that we changed something...
        changed = true;
        this.dispose();
    }//GEN-LAST:event_btnOKActionPerformed

    private void cmbRxDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbRxDeviceActionPerformed
        switch (cmbRxDevice.getSelectedIndex()) {
            case 0:
            default:
                txtLO.setEnabled(true);
                radFirst.setEnabled(true);
                radSecond.setEnabled(true);
                radThird.setEnabled(true);
                radFirst.setSelected(true);
                break;
            case 1:
                txtLO.setEnabled(false);
                radFirst.setEnabled(false);
                radSecond.setEnabled(true);
                radThird.setEnabled(true);
                radSecond.setSelected(true);
                break;
            case 2:
                txtLO.setEnabled(true);
                radFirst.setEnabled(false);
                radSecond.setEnabled(true);
                radThird.setEnabled(true);
                radSecond.setSelected(true);
                break;
            case 3:
                txtLO.setEnabled(true);
                radFirst.setEnabled(false);
                radSecond.setEnabled(false);
                radThird.setEnabled(false);
                radFourth.setSelected(true);
                break;
        }
    }//GEN-LAST:event_cmbRxDeviceActionPerformed

    private void cmbRxDeviceMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_cmbRxDeviceMouseWheelMoved
        var s = new Shared();
        s.mouseWheelComboBoxHandler(evt.getWheelRotation(), cmbRxDevice);
    }//GEN-LAST:event_cmbRxDeviceMouseWheelMoved

    private void chkShowRealFreqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkShowRealFreqActionPerformed
        // This setting isn't compatible with "apply to custom frequencies"
        if (chkShowRealFreq.isSelected()) {
            if (chkApplyToCustom.isSelected()) chkApplyToCustom.doClick();
            chkApplyToCustom.setEnabled(false);
        }
        else {
            chkApplyToCustom.setEnabled(true);
        }
    }//GEN-LAST:event_chkShowRealFreqActionPerformed

    private void chkApplyToCustomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkApplyToCustomActionPerformed
        // This setting isn't compatible with "Show IF"
        if (chkApplyToCustom.isSelected()) {
            if (chkShowRealFreq.isSelected()) chkShowRealFreq.doClick();
            chkShowRealFreq.setEnabled(false);
        }
        else {
            chkShowRealFreq.setEnabled(true);
        }
    }//GEN-LAST:event_chkApplyToCustomActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JCheckBox chkApplyToCustom;
    private javax.swing.JCheckBox chkShowRealFreq;
    private javax.swing.JComboBox<String> cmbRxDevice;
    private javax.swing.ButtonGroup harmonicBG;
    private javax.swing.JPanel harmonicPanel;
    private javax.swing.JLabel lblHelpText;
    private javax.swing.JLabel lblLO;
    private javax.swing.JLabel lblRxDevice;
    private javax.swing.JRadioButton radFirst;
    private javax.swing.JRadioButton radFourth;
    private javax.swing.JRadioButton radSecond;
    private javax.swing.JRadioButton radThird;
    private javax.swing.JPanel satSettingsPanel;
    private javax.swing.JTextField txtLO;
    // End of variables declaration//GEN-END:variables
}
