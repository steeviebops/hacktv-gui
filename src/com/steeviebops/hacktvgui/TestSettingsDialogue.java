/*
 * Copyright (C) 2025 Stephen McGarry
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package com.steeviebops.hacktvgui;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class TestSettingsDialogue extends javax.swing.JDialog {
    
    private boolean changed;
    private final String hackTVDir;
    private final String oldDir;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clockBG = new javax.swing.ButtonGroup();
        testFileChooser = new javax.swing.JFileChooser();
        locationPanel = new javax.swing.JPanel();
        lblLocationDescriptor = new javax.swing.JLabel();
        txtTSDir = new javax.swing.JTextField();
        btnTSDir = new javax.swing.JButton();
        displaySettingsPanel = new javax.swing.JPanel();
        clockPanel = new javax.swing.JPanel();
        radClockOff = new javax.swing.JRadioButton();
        radClockOn = new javax.swing.JRadioButton();
        radDateOn = new javax.swing.JRadioButton();
        lblPhilipsDescriptor = new javax.swing.JLabel();
        textFieldsPanel = new javax.swing.JPanel();
        lblText1 = new javax.swing.JLabel();
        txtTop = new javax.swing.JTextField();
        lblText2 = new javax.swing.JLabel();
        txtBottom = new javax.swing.JTextField();
        buttonPanel = new javax.swing.JPanel();
        btnOK = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        testFileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Test signal settings");
        setName("TestSignalSettings"); // NOI18N
        setResizable(false);

        locationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("File location"));

        lblLocationDescriptor.setText("Specify the directory containing the test signal files.");

        txtTSDir.addMouseListener(new ContextMenuListener());
        txtTSDir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTSDirKeyPressed(evt);
            }
        });

        btnTSDir.setText("Browse...");
        btnTSDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTSDirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout locationPanelLayout = new javax.swing.GroupLayout(locationPanel);
        locationPanel.setLayout(locationPanelLayout);
        locationPanelLayout.setHorizontalGroup(
            locationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(locationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(locationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(locationPanelLayout.createSequentialGroup()
                        .addComponent(txtTSDir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTSDir))
                    .addGroup(locationPanelLayout.createSequentialGroup()
                        .addComponent(lblLocationDescriptor)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        locationPanelLayout.setVerticalGroup(
            locationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(locationPanelLayout.createSequentialGroup()
                .addComponent(lblLocationDescriptor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(locationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTSDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTSDir))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        displaySettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Display settings"));

        clockPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Clock options"));

        clockBG.add(radClockOff);
        radClockOff.setText("Off");

        clockBG.add(radClockOn);
        radClockOn.setText("Time");
        radClockOn.setActionCommand("Time");

        clockBG.add(radDateOn);
        radDateOn.setText("Time and date");
        radDateOn.setActionCommand("Time and date");

        javax.swing.GroupLayout clockPanelLayout = new javax.swing.GroupLayout(clockPanel);
        clockPanel.setLayout(clockPanelLayout);
        clockPanelLayout.setHorizontalGroup(
            clockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clockPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radClockOff)
                    .addComponent(radClockOn)
                    .addComponent(radDateOn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        clockPanelLayout.setVerticalGroup(
            clockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clockPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radClockOff)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radClockOn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radDateOn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblPhilipsDescriptor.setText("These settings apply only to the Philips and FuBK test patterns.");

        textFieldsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Text fields"));

        lblText1.setText("Top/Left");

        txtTop.addMouseListener(new ContextMenuListener());
        txtTop.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTopKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTopKeyTyped(evt);
            }
        });

        lblText2.setText("Bottom/Right");

        txtBottom.addMouseListener(new ContextMenuListener());
        txtBottom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBottomKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBottomKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout textFieldsPanelLayout = new javax.swing.GroupLayout(textFieldsPanel);
        textFieldsPanel.setLayout(textFieldsPanelLayout);
        textFieldsPanelLayout.setHorizontalGroup(
            textFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(textFieldsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(textFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblText2)
                    .addComponent(lblText1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(textFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTop)
                    .addComponent(txtBottom))
                .addContainerGap())
        );
        textFieldsPanelLayout.setVerticalGroup(
            textFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(textFieldsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(textFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblText1)
                    .addComponent(txtTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(textFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblText2)
                    .addComponent(txtBottom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout displaySettingsPanelLayout = new javax.swing.GroupLayout(displaySettingsPanel);
        displaySettingsPanel.setLayout(displaySettingsPanelLayout);
        displaySettingsPanelLayout.setHorizontalGroup(
            displaySettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displaySettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(displaySettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, displaySettingsPanelLayout.createSequentialGroup()
                        .addComponent(textFieldsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clockPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))
                    .addGroup(displaySettingsPanelLayout.createSequentialGroup()
                        .addComponent(lblPhilipsDescriptor)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        displaySettingsPanelLayout.setVerticalGroup(
            displaySettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, displaySettingsPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(lblPhilipsDescriptor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(displaySettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(clockPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textFieldsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });
        buttonPanel.add(btnOK);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        buttonPanel.add(btnCancel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(displaySettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(locationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(locationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displaySettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public TestSettingsDialogue(java.awt.Frame parent, boolean modal, String hackTVDirPath) {
        super(parent, modal);
        initComponents();
        super.setLocationRelativeTo(parent);
        hackTVDir = hackTVDirPath;
        oldDir = GUI.PREFS.get("testdir", "");
        txtTSDir.setText(oldDir);
        txtTop.setText(GUI.PREFS.get("philipstext1", ""));
        txtBottom.setText(GUI.PREFS.get("philipstext2", ""));
        switch (GUI.PREFS.getInt("philipsclock", 0)) {
            case 0:
            default:
                radClockOff.setSelected(true);
                break;
            case 1:
                radClockOn.setSelected(true);
                break;
            case 2:
                radDateOn.setSelected(true);
                break;
        }
        btnCancel.requestFocus();
    }
    
    public boolean settingsChanged() {
        // This boolean instructs the main thread to refresh the test signal list
        return changed;
    }
    
    private void processTypedKey(int kc) {
        switch(kc) {
            case 10:
                // Enter key
                btnOK.doClick();
                break;
            case 27:
                // Esc key
                btnCancel.doClick();
                break;
            default:
                // Do nothing for other keys
                break;
        }
    }
    
    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        // If the directory has changed, process the new one
        if (!txtTSDir.getText().equals(oldDir)) {
            var s = new Shared();
            String l = s.stripQuotes(txtTSDir.getText());
            // Make sure that the selected directory contains what we need
            if (Files.exists(Path.of(l + File.separator + "pm8546g.bin"))) {
                // Save the chosen directory to prefs
                GUI.PREFS.put("testdir", l);
                changed = true;
            }
            else if (txtTSDir.getText().isBlank()) {
                // No directory specified, default to the hacktv location
                GUI.PREFS.remove("testdir");
                changed = true;
            }
            else {
                JOptionPane.showMessageDialog(
                        null,
                        "The pm8546g.bin file was not be found in the specified location.",
                        GUI.APP_NAME,
                        JOptionPane.WARNING_MESSAGE
                );
                return;
            }
        }
        else {
            changed = false;
        }
        // Save pattern preferences
        /*
            The maximum character lengths for each pattern is as follows:
        
            Philips 4:3   Top field: 9 (8 for NTSC), bottom field: 13
            Philips 16:9  Top field: 6, bottom field: 10
            FuBK 4:3      8 characters in each field
            FuBK 16:9     6 characters in each field
        
         */
        int t = txtTop.getText().length();
        int b = txtBottom.getText().length();
        if (txtTop.getText().isBlank()) {
            GUI.PREFS.remove("philipstext1");
        }
        else {
            // Truncate if longer than 9 characters
            if (t > 9) txtTop.setText(txtTop.getText().substring(0,9));
            GUI.PREFS.put("philipstext1", txtTop.getText());
        }
        if (txtBottom.getText().isBlank()) {
            GUI.PREFS.remove("philipstext2");
        }
        else {
            // Truncate if longer than 13 characters
            if (b > 13) txtBottom.setText(txtBottom.getText().substring(0,13));
            GUI.PREFS.put("philipstext2", txtBottom.getText());
        }
        if (radClockOff.isSelected()) {
            GUI.PREFS.remove("philipsclock");
        }
        else if (radClockOn.isSelected()) {
            GUI.PREFS.putInt("philipsclock", 1);
        }
        else if (radDateOn.isSelected()) {
            GUI.PREFS.putInt("philipsclock", 2);
        }
        this.dispose();
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnTSDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTSDirActionPerformed
        testFileChooser.setCurrentDirectory(
            new File(GUI.PREFS.get("testdir", hackTVDir))
        );
        int result = testFileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            String d = testFileChooser.getSelectedFile().toString();
            txtTSDir.setText(d);
        }
    }//GEN-LAST:event_btnTSDirActionPerformed

    private void txtTopKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTopKeyTyped
        if (txtTop.getText().length() >= 9) {
            evt.consume();
        }
    }//GEN-LAST:event_txtTopKeyTyped

    private void txtBottomKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBottomKeyTyped
        if (txtBottom.getText().length() >= 13) {
            evt.consume();
        }
    }//GEN-LAST:event_txtBottomKeyTyped

    private void txtTSDirKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTSDirKeyPressed
        processTypedKey(evt.getKeyCode());
    }//GEN-LAST:event_txtTSDirKeyPressed

    private void txtTopKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTopKeyPressed
        processTypedKey(evt.getKeyCode());
    }//GEN-LAST:event_txtTopKeyPressed

    private void txtBottomKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBottomKeyPressed
        processTypedKey(evt.getKeyCode());
    }//GEN-LAST:event_txtBottomKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnTSDir;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.ButtonGroup clockBG;
    private javax.swing.JPanel clockPanel;
    private javax.swing.JPanel displaySettingsPanel;
    private javax.swing.JLabel lblLocationDescriptor;
    private javax.swing.JLabel lblPhilipsDescriptor;
    private javax.swing.JLabel lblText1;
    private javax.swing.JLabel lblText2;
    private javax.swing.JPanel locationPanel;
    private javax.swing.JRadioButton radClockOff;
    private javax.swing.JRadioButton radClockOn;
    private javax.swing.JRadioButton radDateOn;
    private javax.swing.JFileChooser testFileChooser;
    private javax.swing.JPanel textFieldsPanel;
    private javax.swing.JTextField txtBottom;
    private javax.swing.JTextField txtTSDir;
    private javax.swing.JTextField txtTop;
    // End of variables declaration//GEN-END:variables
}
